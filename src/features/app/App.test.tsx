import { fireEvent, render, screen } from '@testing-library/react';
import { describe, expect, it, vi } from 'vitest';

import { App } from './App';

/* 
	указать AI Qodo Gen как нужно тестировать компонент App:

	Use "Given, When, Then" style.
	Используйте стиль «Дано, Когда, Тогда».

	Use "Arrange, Act, Assert" style.
	Используйте стиль «Упорядочить, Действуть, Утверждать».

	Mock the following dependencies: external image imports (viteLogo, reactLogo) and Counter component
	Смоделируйте следующие зависимости: импорт внешних изображений (viteLogo, responseLogo) и компонент Counter.

	Add funny, pirate-like, comments. Make them different for each test.
	Добавляйте забавные пиратские комментарии. Сделайте их разными для каждого теста.
*/

// Generated by Qodo Gen

describe('App', () => {
	// Component renders without crashing
	it('should render all elements when component mounts', () => {
		// Given
		render(<App />);

		// When
		const viteLink = screen.getByRole('link', { name: /vite logo/i });
		const reactLink = screen.getByRole('link', { name: /react logo/i });
		const heading = screen.getByRole('heading', { name: 'Vite + React' });
		const paragraph = screen.getByText(/click on the vite and react logos/i);

		// Then
		expect(viteLink).toBeInTheDocument();
		expect(reactLink).toBeInTheDocument();
		expect(heading).toBeInTheDocument();
		expect(paragraph).toBeInTheDocument();
	});

	// Component renders without crashing
	it('should render all elements when component mounts', () => {
		// Arrange
		render(<App />);

		// Act
		const viteLink = screen.getByRole('link', { name: /vite logo/i });
		const reactLink = screen.getByRole('link', { name: /react logo/i });
		const heading = screen.getByRole('heading', { name: /vite \+ react/i });
		const paragraph = screen.getByText(/click on the vite and react logos/i);

		// Assert
		expect(viteLink).toBeInTheDocument();
		expect(reactLink).toBeInTheDocument();
		expect(heading).toBeInTheDocument();
		expect(paragraph).toBeInTheDocument();
	});

	// Component handles missing logo images gracefully
	it('should display broken image fallback when logos fail to load', () => {
		// Arrange
		vi.mock('@/assets/img/react.svg', () => {
			return {
				default: () => ({}),
			};
		});
		vi.mock('/vite.svg', () => {
			return {
				default: () => ({}),
			};
		});

		// Act
		render(<App />);
		const images = screen.getAllByRole('img');

		// Assert
		images.forEach((img) => {
			fireEvent.error(img);
			expect(img).toHaveAttribute('alt');
			expect(img).toBeInTheDocument();
		});
	});

	/**
	 * Passes - shows the button count correctly present
	 */
	it('Should show the button count set to 0', () => {
		// Setup
		render(<App />);
		const button = screen.queryByText('count is 0');

		// Expectations
		expect(button).toBeInTheDocument();
	});

	/**
	 * Passes - clicks the button 3 times and shows the correct count
	 */
	it('Should show the button count set to 3', () => {
		// Setup
		render(<App />);
		const button = screen.queryByText('count is 0');

		// Pre Expectations
		expect(button).toBeInTheDocument();

		// Actions
		fireEvent.click(button as HTMLElement);
		fireEvent.click(button as HTMLElement);
		fireEvent.click(button as HTMLElement);

		// Post Expectations
		expect(button?.innerHTML).toBe('count is 3');
	});
});
